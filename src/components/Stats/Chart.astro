<ul role="list" class="flex flex-wrap justify-center">
  <li class="flex flex-col mt-8 mx-8">
    <h3 class="text-xl dark:text-white text-center">Total locked DEV amount</h3>
    <div id="dev_chart"></div>
  </li>
  <li class="flex flex-col mt-8 mx-8">
    <h3 class="text-xl dark:text-white text-center">Total minted DAO tokens</h3>
    <div id="token_chart"></div>
  </li>
</ul>

<script>
  var margin = { top: 50, right: 10, bottom: 30, left: 50 },
    width = 600 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom

  // append the svg object to the body of the page
  var svg = d3
    .select('#dev_chart')
    .append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .append('g')
    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')

  d3.json('./src/script/data/dev_chart.json').then(function (_data) {
    // format data
    data = []
    _data.forEach((d) => {
      data.push({ ...d, date: d3.timeParse('%Y-%m-%d')(d.date) })
    })

    // List of groups = header of the csv files
    const keys = ['mainnet', 'arb', 'polygon']

    // color palette
    const color = d3.scaleOrdinal().domain(keys).range(d3.schemePastel1)

    //stack the data?
    const stackedData = d3.stack().keys(keys)(data)

    // Add X axis
    const x = d3
      .scaleTime()
      .domain(
        d3.extent(data, function (d) {
          return d.date
        })
      )
      .range([0, width])
    const xAxis = svg
      .append('g')
      .attr('transform', `translate(0, ${height})`)
      .call(d3.axisBottom(x).ticks(5))

    // Add Y axis
    const y = d3
      .scaleLinear()
      .domain([
        0,
        d3.max(data, function (d) {
          return +(d.mainnet + d.arb + d.polygon)
        }),
      ])
      .range([height, 0])
    svg.append('g').call(d3.axisLeft(y).ticks(5))

    // Add a clipPath: everything out of this area won't be drawn.
    const clip = svg
      .append('defs')
      .append('svg:clipPath')
      .attr('id', 'clip')
      .append('svg:rect')
      .attr('width', width)
      .attr('height', height)
      .attr('x', 0)
      .attr('y', 0)

    // Create the scatter variable: where both the circles and the brush take place
    const areaChart = svg.append('g').attr('clip-path', 'url(#clip)')

    // Area generator
    const area = d3
      .area()
      .x(function (d) {
        return x(d.data.date)
      })
      .y0(function (d) {
        return y(d[0])
      })
      .y1(function (d) {
        return y(d[1])
      })

    // Show the areas
    areaChart
      .selectAll('mylayers')
      .data(stackedData)
      .join('path')
      .attr('class', function (d) {
        return 'myArea ' + d.key
      })
      .style('fill', function (d) {
        return color(d.key)
      })
      .attr('d', area)

    // What to do when one group is hovered
    const highlight = function (event, d) {
      console.log('call highlight')
      // reduce opacity of all groups
      d3.selectAll('.myArea').style('opacity', 0.1)
      // expect the one that is hovered
      d3.select('.' + d).style('opacity', 1)
    }

    // And when it is not hovered anymore
    const noHighlight = function (event, d) {
      console.log('call noHighlight')
      d3.selectAll('.myArea').style('opacity', 1)
    }

    // Add one dot in the legend for each name.
    const size = 15
    svg
      .selectAll('myrect')
      .data(keys)
      .join('rect')
      .attr('x', 20)
      .attr('y', function (d, i) {
        return i * (size + 5)
      }) // 100 is where the first dot appears. 25 is the distance between dots
      .attr('width', size)
      .attr('height', size)
      .style('fill', function (d) {
        return color(d)
      })
      .on('mouseover', highlight)
      .on('mouseleave', noHighlight)

    // Add one dot in the legend for each name.
    svg
      .selectAll('mylabels')
      .data(keys)
      .join('text')
      .attr('x', 25 + size * 1.2)
      .attr('y', function (d, i) {
        return i * (size + 5) + size / 2
      }) // 100 is where the first dot appears. 25 is the distance between dots
      .style('fill', function (d) {
        return color(d)
      })
      .text(function (d) {
        return d
      })
      .attr('text-anchor', 'left')
      .style('alignment-baseline', 'middle')
      .on('mouseover', highlight)
      .on('mouseleave', noHighlight)
  })
  // append the svg object to the body of the page
  const tokenSvg = d3
    .select('#token_chart')
    .append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`)
</script>
