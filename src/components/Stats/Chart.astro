<ul
  role="list"
  class="flex min-w-min max-w-max flex-wrap items-center justify-center px-8 pb-6 md:pt-2"
>
  <li
    class="col-span-1 m-8 flex flex-col divide-y divide-gray-200 rounded-lg text-center shadow dark:bg-white"
  >
    <div
      id="dev_chart"
      class="flex flex-col rounded-t-lg p-8 text-gray-900 dark:bg-gray-100 dark:text-gray-900"
    >
    </div>
  </li>
  <li
    class="col-span-1 m-8 flex flex-col divide-y divide-gray-200 rounded-lg text-center shadow dark:bg-white"
  >
    <div
      id="token_chart"
      class="flex flex-col rounded-t-lg p-8 text-gray-900 dark:bg-gray-100 dark:text-gray-900"
    >
    </div>
  </li>
</ul>

<script>
  // set the dimensions and margins of the graph
  const margin = { top: 10, right: 30, bottom: 30, left: 60 },
    width = 600 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom

  // append the svg object to the body of the page
  const devSvg = d3
    .select('#dev_chart')
    .append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`)

  //Read the data
  d3.csv(
    'data.csv',

    // When reading the csv, I must format variables:
    function (d) {
      return { date: d3.timeParse('%Y-%m-%d')(d.date), value: d.value }
    }
  ).then(
    // Now I can use this dataset:
    function (data) {
      data.date = d3.timeParse('%Y-%m-%d')(data.date)
      data.value = +data.value
      // Add X axis --> it is a date format
      const x = d3
        .scaleTime()
        .domain(
          d3.extent(data, function (d) {
            return d.date
          })
        )
        .range([0, width])
      devSvg
        .append('g')
        .attr('transform', `translate(0, ${height})`)
        .call(d3.axisBottom(x))

      // Add Y axis
      const y = d3
        .scaleLinear()
        .domain([
          0,
          d3.max(data, function (d) {
            return +d.value
          }),
        ])
        .range([height, 0])
      devSvg.append('g').call(d3.axisLeft(y))

      // Add the line
      devSvg
        .append('path')
        .datum(data)
        .attr('fill', 'none')
        .attr('stroke', 'steelblue')
        .attr('stroke-width', 1.5)
        .attr(
          'd',
          d3
            .line()
            .x(function (d) {
              return x(d.date)
            })
            .y(function (d) {
              return y(d.value)
            })
        )
    }
  )
  // append the svg object to the body of the page
  const tokenSvg = d3
    .select('#token_chart')
    .append('svg')
    .attr('width', width + margin.left + margin.right)
    .attr('height', height + margin.top + margin.bottom)
    .append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`)

  //Read the data
  d3.csv(
    'data.csv',

    // When reading the csv, I must format variables:
    function (d) {
      return { date: d3.timeParse('%Y-%m-%d')(d.date), value: d.value }
    }
  ).then(
    // Now I can use this dataset:
    function (data) {
      data.date = d3.timeParse('%Y-%m-%d')(data.date)
      data.value = +data.value
      // Add X axis --> it is a date format
      const x = d3
        .scaleTime()
        .domain(
          d3.extent(data, function (d) {
            return d.date
          })
        )
        .range([0, width])
      tokenSvg
        .append('g')
        .attr('transform', `translate(0, ${height})`)
        .call(d3.axisBottom(x))

      // Add Y axis
      const y = d3
        .scaleLinear()
        .domain([
          0,
          d3.max(data, function (d) {
            return +d.value
          }),
        ])
        .range([height, 0])
      tokenSvg.append('g').call(d3.axisLeft(y))

      // Add the line
      tokenSvg
        .append('path')
        .datum(data)
        .attr('fill', 'none')
        .attr('stroke', 'steelblue')
        .attr('stroke-width', 1.5)
        .attr(
          'd',
          d3
            .line()
            .x(function (d) {
              return x(d.date)
            })
            .y(function (d) {
              return y(d.value)
            })
        )
    }
  )
</script>
